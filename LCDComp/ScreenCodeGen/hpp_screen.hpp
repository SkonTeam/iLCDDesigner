#pragma once

#include <iostream>
#include <string>
#include <fstream>
#include <sstream>
#include <bitset>
#include "EnumDefines.hpp"

using namespace std;

typedef int byte_int;
typedef signed int signed_byte;
typedef unsigned short int word;
typedef signed short int signed_word;
typedef signed long int Long;
typedef bitset<24> color;
typedef char by_file[255];
typedef char by_name[255];
typedef unsigned short int color_16bit;
typedef bitset<8> bits;
typedef unsigned short int wbits;
typedef string file;

class Screen{
private:
	ofstream out_file;
	string filename;
public:
	Screen(string filename);
	~Screen();
	void WriteComment(std::string comment);
	void StartMacro(std::string MacroName,int MacroIndex,int Charset = 1252);
	void EndMacro();
	void NoOperation();
	void ResetAll();
	void ResetAllandShowStartupGraphic();
	void RebootPanelController();
	void GetLastErrorCode();
	void GetFirmwareInfo();
	void GetIdentificationInfo();
	void GetFirmwareVersion();
	void GetSerialNumber();
	void GetiLCDControllerName();
	void GetHardwareRevision();
	void GetNetworkStatus();
	void GetInputBufferSize();
	void GetProjectInfo();
	void GetTouchScreenType();
	void DefineViewport(byte_int viewport, byte_int orientation, word width, word height);
	void SelectViewport(byte_int viewport);
	void CopyViewport(byte_int screen, byte_int viewport, bool copy_content, word pos_x, word pos_y);
	void TurnDisplayOnOff(DisplayMode mode);
	void SetScreenOrientation(ScreenOrientation orientation);
	void SetTextOrGraphicOrientation(GraphicOrientation orientation);
	void EnableDisableANSI(bool on_off);
	void SetColumnAddress(word address);
	void IncrementDecrementColumnAddress(signed_word addr_inc);
	void SetRowAddress(word address);
	void IncrementDecrementRowAddress(signed_word addr_inc);
	void SetCursorPosition(word pos_x, word pos_y);
	void SetRelativeCursorPosition(signed_word x_inc, signed_word y_inc);
	void GetCursorPosition();
	void GetGraphicInfobyindex(word graphic_index);
	void GetGraphicInfobyname(by_name graphic_name);
	void GetGraphicInfobyfilename(by_file graphic_filename);
	void SetGraphicAlignment(bits mode, word width, word height);
	void GetTextExtent(string text);
	void GetUnicodeTextExtent(string unicode_text);
	void GetTextMessageExtentbyindex(byte_int message_index);
	void GetTextMessageExtentbyname(by_name message_name);
	void SetTextAlignment(TextAlign mode, word width, word height);
	void SetLineStyle(byte_int style);
	void GetDisplaySize();
	void SetAutoLinefeed(bool on_off);
	void SetWrapMode(bool horz_wrap, bool vert_wrap);
	void GoTerminalMode();
	void SetXONXOFFforTerminalMode(bool on_off);
	void SetBacklightMode(BacklightMode mode);
	void GetBacklightMode();
	void SetBacklightBlinkFrequency(byte_int period);
	void SetBacklightIntensity(byte_int intensity);
	void SetBacklightIntensityHighRes(byte_int intensity);
	void GetBacklightIntensity();
	void GetBacklightIntensityHighRes();
	void GetFixedLCDContrastGamma();
	void SetLCDContrast(byte_int value);
	void GetLCDContrast();
	void SetLCDGammaValue(byte_int value);
	void GetLCDGammaValue();
	void SetGraphicsScaling(byte_int factor);
	void SetFontsScaling(byte_int factor);
	void SetColumnCoordinatesScaling(word mult, word div);
	void SetRowCoordinatesScaling(word mult, word div);
	void SetFontbyindex(word font_index);
	void SetFontbyname(by_name font_name);
	void SetFontSpacing(byte_int x_spacing, byte_int y_spacing);
	void SetSymbolFont(bool on_off);
	void SetBoldMode(bool on_off);
	void SetUnderlineMode(bool on_off);
	void SetUnderlinePosition(signed_byte position);
	void SetInverseMode(bool on_off);
	void SetTransparentModeOnOff(bool on_off);
	void SetForegroundColor(color color_value);
	void SetForegroundColor(COLORREF color_value);
	void SetForegroundColorRGB(unsigned RedVal, unsigned GreenVal, unsigned BlueVal);
	void SetBackgroundColor(color color_value);
	void SetBackgroundColorRGB(unsigned RedVal, unsigned GreenVal, unsigned BlueVal);
	void SetBorderColor(color color_value);
	void SetBorderColorRGB(unsigned RedVal, unsigned GreenVal, unsigned BlueVal);
	void SetBorderShadowColor(color color_value);
	void SetBorderShadowColorRGB(unsigned RedVal, unsigned GreenVal, unsigned BlueVal);
	void SetShadowOffset(signed_byte x_offset, signed_byte y_offset);
	void SetRectangleCornerRadius(word radius);
	void SetLineThickness(byte_int thickness);
	void SetLineCapsStyle(byte_int style);
	void SetLineEndingMode(LineDrawMode mode);
	void SetAlpha(byte_int alpha);
	void SetFillingColor(color color_value);
	void SetFillingColorRGB(unsigned RedVal, unsigned GreenVal, unsigned BlueVal);
	void SetFillingGradient(GradientMode mode, word ramp, color from_color, color to_color);
	void SetFillingGradientRGB(GradientMode mode, word ramp, unsigned RedValFrom, unsigned GreenValFrom, unsigned BlueValFrom, unsigned RedValTo, unsigned GreenValTo, unsigned BlueValTo);
	void SetFillingTilebyindex(word graphic_index);
	void SetFillingTilebyname(by_name graphic_name);
	void SetFillingTilebyfilename(by_file graphic_filename);
	void SetAdjustmentforGraphics(bits mode);
	void SetBrightnessAdjustment(signed_word value);
	void SetContrastAdjustment(signed_word value);
	void SetHueAdjustment(signed_word value);
	void SetSaturationAdjustment(signed_word value);
	void EraseDisplay();
	void EraseDisplayArea(word width, word height);
	void InvertDisplay();
	void InvertDisplayArea(word width, word height);
	void WriteText(string text_string);
	void WriteUnicodeText(string unicode_text);
	void WriteTextMessagebyindex(word message_index);
	void WriteTextMessagebyname(by_name message_name);
	void ScrollUp(word scroll_y);
	void ScrollDown(word scroll_y);
	void ScrollLeft(word scroll_x);
	void ScrollRight(word scroll_x);
	void WriteScanLine(word no_of_pixels, color_16bit p0);
	void ReadScanLine(word no_of_pixels);
	void Write1D2DRunLengthEncodedScanLine(signed_byte prev_line_offset, word no_of_pixels, word no_of_rle_bytes, byte_int b0);
	void Read1D2DRunLengthEncodedScanLine(signed_byte prev_line_offset, word no_of_pixels);
	void SetClearPixel(bool on_off);
	void SetClearPixelatXY(word pos_x, word pos_y, bool on_off);
	void DrawDot(color color_value);
	void DrawDotRGB(unsigned RedVal, unsigned GreenVal, unsigned BlueVal);
	void DrawDotatXY(word pos_x, word pos_y, color color_value);
	void DrawDotatXYRGB(word pos_x, word pos_y, unsigned RedVal, unsigned GreenVal, unsigned BlueVal);
	void DrawLine(word end_x, word end_y);
	void DrawRectangle(RectangleMode mode, word width, word height);
	void DrawCircle(word radius);
	void DrawStyledCircle(CircleMode mode, word radius);
	void DrawEllipse(EllipseMode mode, word vertex_a, word vertex_b);
	void AdjustDisplay(DisplayAdjust mode);
	void AdjustDisplayArea(DisplayAreaAdjust mode, word width, word height);
	void FillDisplay();
	void FillDisplayArea(word width, word height);
	void DisplayLocalGraphicbyindex(word graphic_index);
	void DisplayLocalGraphicbyname(by_name graphic_name);
	void DisplayLocalGraphicbyfilename(by_file graphic_filename);
	void DisplayGraphicAreabyname(word offset_x, word offset_y, word width, word height, by_name graphic_name);
	void DisplayGraphicAreabyfilename(word offset_x, word offset_y, word width, word height, by_file graphic_filename);
	void LoadAnimatedGraphicsbyindex(byte_int anim_loc, word anim_graph_index);
	void LoadAnimatedGraphicsbyname(byte_int anim_loc, by_name anim_graph_name);
	void LoadAnimatedGraphicsbyfilename(byte_int anim_loc, by_file anim_graph_filename);
	void SetAnimationCoordinatestoXY(byte_int anim_loc, word pos_x, word pos_y);
	void SetAnimationCoordinatestoCursorPosition(byte_int anim_loc);
	void StartorRestartAnimation(byte_int anim_loc);
	void StopAnimationandSetFrameNumber(byte_int anim_loc, word frame);
	void StopAnimation(byte_int anim_loc);
	void SetAnimationRepetitions(byte_int anim_loc, word repeat);
	void EraseAnimationImageArea(byte_int anim_loc);
	void EraseAnimationFrameArea(byte_int anim_loc);
	void SuspendAnimationEngine();
	void ResumeAnimationEngine();
	void MoveAnimation(byte_int anim_loc, word frame_idx, bool run_backwards);
	void SetAnimationBackgroundColor(byte_int anim_loc, color color_value);
	void SetAnimationBackgroundColorRGB(byte_int anim_loc, unsigned RedVal, unsigned GreenVal, unsigned BlueVal);
	void SetAnimationBackgroundFrame(byte_int anim_loc, word frame);
	void SetAnimationBackgroundGraphicbyindex(byte_int anim_loc, word offset_x, word offset_y, word graphic_index);
	void SetAnimationBackgroundGraphicbyname(byte_int anim_loc, word offset_x, word offset_y, by_name graphic_name);
	void SetAnimationBackgroundGraphicbyfilename(byte_int anim_loc, word offset_x, word offset_y, by_file graphic_filename);
	void SetAnimationBackgroundScreen(byte_int anim_loc, word bg_offset_x, word bg_offset_y, byte_int screen);
	void RemoveAnimationBackground(byte_int anim_loc);
	void GetNumberofScreens();
	void SetViewScreen(byte_int index);
	void GetViewScreenParameters();
	void SetDrawScreen(byte_int screen);
	void GetDrawScreenParameters();
	void CopyScreenArea(word width, word height, byte_int screen, word pos_x, word pos_y);
	void CopyScreenTo(byte_int screen);
	void CopyScreenFrom(byte_int screen);
	void PaintScreenFrom(byte_int screen);
	void InvertScreen(byte_int screen);
	void ScrollUpScreen(byte_int screen, word scroll_y);
	void ScrollDownScreen(byte_int screen, word scroll_y);
	void ScrollLeftScreen(byte_int screen, word scroll_x);
	void ScrollRightScreen(byte_int screen, word scroll_x);
	void SetHeightofScreen(byte_int screen, word height);
	void SetWidthofScreen(byte_int screen, word width);
	void SaveCursorAttributestoMemory(byte_int index);
	void RestoreCursorAttributesfromMemory(byte_int index);
	void ExecuteMacrobyindex(word macro_index);
	void ExecuteMacrobyname(by_name macro_name);
	void ExecuteProtectedMacrobyindex(word macro_index);
	void ExecuteProtectedMacrobyname(by_name macro_name);
	void JumptoMacrobyindex(word macro_index);
	void JumptoMacrobyname(by_name macro_name);
	void DelayMacroExecution(word delay);
	void SetMacroExecutionSpeed(word speed);
	void AllowKeyboardTouchEventstobeProcessed();
	void SetMacroTimer(byte_int time);
	void CalibrateTouchScreen();
	void CalibrateTouchScreenandReport();
	void VerifyTouchScreenCalibration();
	void SetTouchFieldWidth(word width);
	void SetTouchFieldHeight(word height);
	void SetTouchFieldMakeMacrobyindex(word macro_index);
	void SetTouchFieldMakeMacrobyname(by_name macro_name);
	void SetTouchFieldBreakMacrobyindex(word macro_index);
	void SetTouchFieldBreakMacrobyname(by_name macro_name);
	void EnableDisableAutomaticTouchMacroExecuting(bool on_off);
	void SetTouchFieldTextMessagebyindex(word message_index);
	void SetTouchFieldTextMessagebyname(by_name message_name);
	void CreateDefineTouchField(byte_int field_idx, byte_int key);
	void RemoveTouchField(byte_int field_idx);
	void GlobalEnableDisableTouchFields(bool on_off);
	void SetCurrentTouchFieldIndex(byte_int field_idx);
	void ExecuteTouchMakeMacro(byte_int field_idx);
	void ExecuteTouchBreakMacro(byte_int field_idx);
	void DrawTouchFieldTextMessage(byte_int field_idx);
	void SetCursortoTouchField(byte_int field_idx);
	void EnableDisableTouchFieldReporting(bool on_off);
	void EnableDisableReportingTouchCoordinates(bool on_off);
	void EnableDisableReportingMovements(bool on_off);
	void RetrieveLastTouchScreenEvent();
	void SetNumberofTouchFingers(byte_int fingers);
	void SetThresholdforMovementReporting(byte_int threshold);
	void EnableDisableTouchFieldQueue(bool on_off);
	void StartDemonstrationModebyindex(byte_int mode, word timeout, word macro_index);
	void StartDemonstrationModebyname(byte_int mode, word timeout, by_name macro_name);
	void SetOutput(byte_int out_no, OutputMode mode);
	void SetMultipleOutputs(wbits out_mask, wbits blink_mask);
	void SetOutputBlinkFrequency(byte_int period);
	void SetRelaysOnOffPWM(byte_int relay_no, RelayMode mode);
	void RelaysOneShot(byte_int relay_no, bool on_off, word time);
	void EnableDisableRotaryEncoderReporting(bool on_off);
	void EnableDisableKeyboard(bool on_off);
	void EnableDisableKeyboardReporting(bool on_off);
	void GetKeyboardState();
	void SetBaudRate(byte_int port_no, Long baud);
	void GetCurrentCommunicationPort();
	void EnableDisableCommunicationPorts(PortNumbers port_mask, word timeout);
	void GetEnabledCommunicationPorts();
	void GetInputsState();
	void GetADCValue(byte_int port);
	void RequestDiskStatus();
	void MakeDirectory(file dirname);
	void GetFileStatus(file filename);
	void OpenDirectoryandReadFirstEntry(file dirname);
	void ReadNextEntry();
	void DeleteFile(file filename);
	void OpenFile(byte_int handle, FileAccessMode mode, file filename);
	void CloseFile(byte_int handle);
	void TellPositioninFile(byte_int handle);
	void SetPositioninFile(byte_int handle, Long position);
	void ReadFile(byte_int handle, word count);
	void ReadStringfromFile(byte_int handle, byte_int endchar);
	void WriteFile(byte_int handle, word count, byte_int b0);
	void WriteStringtoFile(byte_int handle, string text_string);
	void TruncateFile(byte_int handle);
	void WriteApplicationDatatoFlash(FlashUpdateFlags flags, file filename);
	void UnmountMicroSDCard();
	void SetTime(byte_int hour, byte_int minute, byte_int second);
	void GetTime();
	void SetDate(byte_int year, byte_int month, byte_int day, byte_int weekday);
	void GetDate();
	void SetPWMNumber0(Long freq, word duty_cycle);
	void SetPWMNumber1(word duty_cycle);
	void GetEEPROMSize();
	void EraseEEPROM();
	void ReadEEPROM(word address);
	void WriteEEPROM(word address, byte_int data);
	void SetPCAPConfigurationtoFactoryDefault();
	void SetWatchdogInterval(word interval);
	void FeedWatchdog();
	void Shutdown();
	void HardShutdown();
	void CancelShutdown();
	void GetPowerState();
	void ResetMotherboard();
	void SetSmartPowerOffMode(bool on_off);
	void SetPowerOffNotificationOnOff(bool on_off);
	void SetMessageOffset(word offset);
	void SetGraphicOffset(word offset);
	void SetMacroOffset(word offset);
	void SetFontOffset(word offset);
	void SetMessageNamePrefix(string prefix);
	void SetGraphicNamePrefix(string prefix);
	void SetMacroNamePrefix(string prefix);
	void SetFontNamePrefix(string prefix);
	void SetMessageNameSuffix(string suffix);
	void SetGraphicNameSuffix(string suffix);
	void SetMacroNameSuffix(string suffix);
	void SetFontNameSuffix(string suffix);

};